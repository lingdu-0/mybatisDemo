<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
	namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离
	注意：使用mapper代理开发时，namespace有特殊且重要的作用
 -->
<mapper namespace="user">

    <!--
        [id]：statement的id，要求在命名空间内唯一
        [parameterType]：传入参数的类型
        [resultType]：查询出的单条结果集对应的java类型
        [#{}]： 表示一个占位符?
        [#{id}]：表示该占位符待接收参数的名称为id。
        注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义
     -->
    <!--根据ID查询-->
    <select id="findUserById" parameterType="int" resultType="user">
		SELECT * FROM user WHERE id = #{id}
	</select>
    <!--
    [${}]:表示拼接SQL字符串
    [${value}]:表示要拼接的是简单类型参数
    注意:
    简单类型:int,byte,....string
    1.如果参数为简单类型时,${}里面的参数名必须为value
    2.${}会引起SQL注入,一般情况下不推荐使用,但是有些场景必须使用${},比如order by ${colname}
    -->
    <!--模糊查询-->
    <select id="findUserByName" parameterType="String" resultType="user">
        select  * from user where username like '%${value}%'
    </select>

    <!--插入数据
    占位是写模型的属性
    -->
    <insert id="addUser" parameterType="user">
        insert into user (username,sex,birthday,address)
        value (#{username},#{sex},#{birthday},#{address});
    </insert>
    <!--插入时自动返回主键ID-->
    <insert id="addUser2" parameterType="user" >
        <selectKey keyProperty="id" resultType="int" order="AFTER">
            <!--
                [selectKey标签]：通过select查询来生成主键
                [keyProperty]：指定存放生成主键的属性
                [resultType]：生成主键所对应的Java类型
                [order]：指定该查询主键SQL语句的执行顺序，相对于insert语句
                [last_insert_id]：MySQL的函数，要配合insert语句一起使用 -->
            /*获取最后一个插入id*/
            select last_insert_id();
        </selectKey>
        insert into user (username,sex,birthday,address)
        value (#{username},#{sex},#{birthday},#{address});
    </insert>
    <!--删除数据-->
    <delete id="deleteUser" parameterType="int">
        delete from user where id = #{id};
    </delete>
    <!--更新数据-->
    <update id="updateUser" parameterType="user">
        update user set username=#{username},address=#{address}
        where id = #{id};
    </update>
</mapper>
